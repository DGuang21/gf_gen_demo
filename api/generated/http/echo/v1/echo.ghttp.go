// Code generated by protoc-gen-go-ghttp. DO NOT EDIT.
// versions:
// 	protoc-gen-go-http v0.0.1
// 	protoc             v3.21.5
// source: echo/v1/echo.proto

package v1

import (
	context "context"
	g "github.com/gogf/gf/v2/frame/g"
)

var _ = g.Meta{}
var _ = context.Background()

// UnimplementedEchoServer
type UnimplementedEchoServer struct {
	impl EchoImpl
}

// RegisterEchoServer is an entry that must be implemented.
func RegisterEchoServer(impl EchoImpl) UnimplementedEchoServer {
	return UnimplementedEchoServer{impl: impl}
}

// SayReq  SayReq is the request message for the Echo.Say method.
type SayReq struct {
	g.Meta     `path:"/v1/echo/say" method:"POST"`
	Content    string             `v:"required" d:"hello world" ` // 提交内容
	Nickname   string             // only comment,not rule
	Sex        string             // tail comment
	Data       *SayRes            // 结构体调用
	MapData    map[string]*SayRes // map 调用
	ArrayData  []*SayRes          // 数组调用
	IntData    int32              // int
	Uint32Data uint32             // uint32
	Uint64Data int64              `d:"0" v:"required" json:"uint64_data" ` // uint64
}

// SayRes  SayRes is the response message for the Echo.Say method.
type SayRes struct {
	Content string
}

// Say  Echo returns the same message it receives.
func (Echo UnimplementedEchoServer) Say(ctx context.Context, req *SayReq) (*SayRes, error) {
	// 这个ctx key需要放到gf的常量中去
	ctx = context.WithValue(ctx, "ctx_http_pattern", "/v1/echo/say")
	ctx = context.WithValue(ctx, "ctx_http_method", "POST")
	ctx = context.WithValue(ctx, "ctx_grpc_pattern", "/proto.v1.Echo/Say")
	return Echo.impl.Say(ctx, req)
}

// EchoImpl is the server API for Echo service.
type EchoImpl interface {
	Say(ctx context.Context, req *SayReq) (*SayRes, error)
}
