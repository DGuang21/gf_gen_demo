// Code generated by protoc-gen-go-ghttp. DO NOT EDIT.
// versions:
// 	protoc-gen-go-http v0.0.1
// 	protoc             v3.21.5
// source: user/v1/user.proto

package v1

import (
	context "context"

	gcode "github.com/gogf/gf/v2/errors/gcode"
	gerr "github.com/gogf/gf/v2/errors/gerror"
	g "github.com/gogf/gf/v2/frame/g"
)

var _ = context.Background()
var _ = g.Meta{}
var notImplErrorCode = gcode.New(-1, "", nil)

type UnimplementedUserServer struct {
	impl UserImpl
}

func NewUserApi(impl UserImpl) UnimplementedUserServer {
	return UnimplementedUserServer{impl: impl}
}

// UserSignIn SignInRequest // message: sign in request
type SignInRequest struct {
	g.Meta `path:"GET" method:"/sign_in"`

	Name string // 定义openapi的注释，在生成完代码后，会根据引入的插件自动生成相应的api文档以及注释

	Password string // 校验参数，这个已经不太方便直接替换到新的结构体里面了，所以下文是用了map来管理

	Passport string
}

// UserSignIn UserSignResponse
type UserSignResponse struct {
}

func (User UnimplementedUserServer) UserSignIn(ctx context.Context, req *SignInRequest) (*UserSignResponse, error) {
	return nil, gerr.NewCode(notImplErrorCode, "Method UserSignIn not implemented.")
}

// UserProfile UserProfileRequest
type UserProfileRequest struct {
	g.Meta `path:"GET" method:"/profile"`

	Name string
}

// UserProfile UserProfileResponse
type UserProfileResponse struct {
	Name string

	Email string

	Phone string
}

func (User UnimplementedUserServer) UserProfile(ctx context.Context, req *UserProfileRequest) (*UserProfileResponse, error) {
	return nil, gerr.NewCode(notImplErrorCode, "Method UserProfile not implemented.")
}

type UserImpl interface {
	UserSignIn(ctx context.Context, req *SignInRequest) (*UserSignResponse, error)

	UserProfile(ctx context.Context, req *UserProfileRequest) (*UserProfileResponse, error)
}
